@app.route('/testuletz')
def testuletz():
    if client:
        query = Query(db, selector= {'email': {'$eq': 'molnar.malina@yahoo.com'}})
        if len(query()['docs']) == 0:
            print('nu am gasit nimic')
        else:   
            l = []
            res = query()['docs']
            for a in res:
                my_id = a['_id']
            my_document = db[my_id]
            if 'books' in my_document.keys():
                print("EXISTA")
            else:
                print("NU EXISTA")
            my_document['books'].append("Gandacelul");
            my_document.save()
            return jsonify(a)
        #return jsonify(list(map(lambda doc: doc['name'], db)))
    else:
        print('No database')
        return jsonify([])

----------------------------------------------


@app.route('/api/visitors', methods=['GET'])
def get_visitor():
    if client:
        query = Query(db, selector= {'type': {'$eq': 'user'}})
        if len(query()['docs']) == 0:
            print('nu am gasit nimic')
        else:   
            l = []
            for doc in query()['docs']:
                print(doc['name'])
                l.append(doc['name'])
            return jsonify(l)
        #return jsonify(list(map(lambda doc: doc['name'], db)))
    else:
        print('No database')
        return jsonify([])

----------------------------------------------

@app.route('/api/visitors', methods=['POST'])
def put_visitor():
    user = request.json['name']
    data = {'name':user}
    if client:
        my_document = db.create_document(data)
        data['_id'] = my_document['_id']
        return jsonify(data)
    else:
        print('No database')
        return jsonify(data)

----------------------------------------------

@app.route('/sending_love')
def sending_love():
    arg1 = request.args['arg1']
    arg2 = request.args['arg2']
    data = {'name':arg1, 'age':arg2}
    if client:
        my_document = db.create_document(data)
        data['_id'] = my_document['_id']
        print("ADDED!!!!")
        return arg1
    else:
        print('No database')
        return jsonify(data)

------------------------------------------------

@app.route('/select_database')
def select_database():
    if client:
        selector = {'age': {'$eq': '20'}}
        docs = db.get_query_result(selector)
        for doc in docs:
            print(doc)
        return jsonify(doc)   #returneaza doar ultimul document

-----------------------------------------------

@app.route('/show_filtered_books')
def show_filtered_books():
    if client:
        query = Query(db, selector= {
                                        "genre": {
                                            "$elemMatch": {
                                                "$eq": "history"
                                            }
                                        }
                                    })
        if len(query()['docs']) == 0:
            print('nu am gasit nimic')
        else:   
            k = []
            for doc in query()['docs']:
                print(doc['title'])
                k.append(doc['title'])
            return jsonify( query()['docs'])        #afiseaza toate documentele cu toate atributele
           # return jsonify(l)
    else:
        return 'not connected'

-----------------------------------------------

@app.route('/query', methods=['GET'])
def query():
    if client:
        query = Query(db, selector= {'age': {'$eq': '20'}})
        if len(query()['docs']) == 0:
            print('nu am gasit nimic')
        else:   
            l = []
            for doc in query()['docs']:
                print(doc['name'])
                l.append(doc['name'])
            #return jsonify( query()['docs'])        #afiseaza toate documentele cu toate atributele
            return jsonify(l)
    else:
        return 'not connected'

-------------------------------------------------

@app.route('/delete_doc')
def delete_entry():
    if client:
        arg1 = request.args['arg1']
        selector = {'name': {'$eq': arg1}}
        docs = db.get_query_result(selector)
        if docs is None:
            print('Nothing found')
        else:
            nr_elem = sum(1 for _ in docs)   #to know how many documents returned the query
            print("Am gasit",nr_elem)
        if nr_elem == 1:                    #the one we were looking for
            for doc in docs:
                to_delete = doc['_id']
                name = doc['name']
            my_document = db[to_delete]
            my_document.delete()
            str = 'I have deleted '+ name
            return str
        else:
            return 'did not delete'
    else:
        return 'did not delete'

-------------------------------------------------

@app.route('/show_all_books')
def show_all_books():
    if client:
        query = Query(db, selector= {'type': {'$eq': 'book'}})
        if len(query()['docs']) == 0:
            print('nu am gasit nimic')
        else:   
            books = []
            for doc in query()['docs']:
                print(doc['title'])
                books.append(doc['title'])
            #return jsonify( query()['docs'])        #afiseaza toate documentele cu toate atributele
            return jsonify(books)
    else:
        return 'not connected'

-------------------------------------------------









